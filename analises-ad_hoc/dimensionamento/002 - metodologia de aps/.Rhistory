if (!require(RODBC)) { install.packages(RODBC); require(RODBC) }
dremio_host <- "200.137.215.27"
dremio_port <- "31010"
dremio_uid <- "daniel"
dremio_pwd <- "p7USWgsqaEH3CWe"
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;HOST=%s;PORT=%s;UID=%s;PWD=%s;AUTHENTICATIONTYPE=Basic Authentication;CONNECTIONTYPE=Direct", dremio_host, dremio_port, dremio_uid, dremio_pwd))
df_exemplo_luan <- sqlQuery(channel, "SELECT DTOBITO, DTNASC, IDADE FROM Dados.sim.DO
WHERE UF = 'AC'")
View(df_exemplo_luan)
if (!require(RODBC)) { install.packages(RODBC); require(RODBC) }
dremio_host <- "200.137.215.27"
dremio_port <- "31010"
dremio_uid <- "daniel"
dremio_pwd <- "p7USWgsqaEH3CWe"
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;HOST=%s;PORT=%s;UID=%s;PWD=%s;AUTHENTICATIONTYPE=Basic Authentication;CONNECTIONTYPE=Direct", dremio_host, dremio_port, dremio_uid, dremio_pwd))
setwd("~/GitHub/obs-cigets/analises-ad_hoc/dimensionamento/002 - metodologia de aps")
setwd("~/GitHub/obs-cigets/analises-ad_hoc/dimensionamento/002 - metodologia de aps")
cadastro_egestorab <- read_delim("cadastro_egestorab.csv",
";", escape_double = FALSE, locale = locale(date_names = "pt",
encoding = "ISO-8859-1", asciify = TRUE),
trim_ws = TRUE)
setwd("~/GitHub/obs-cigets/analises-ad_hoc/dimensionamento/002 - metodologia de aps")
library(readr)
cadastro_egestorab <- read_delim("cadastro_egestorab.csv",
";", escape_double = FALSE, locale = locale(date_names = "pt",
encoding = "ISO-8859-1", asciify = TRUE),
trim_ws = TRUE)
cadastr_pop_ponderada <- read_delim("cadastr_pop_ponderada.csv",
";", escape_double = FALSE, locale = locale(date_names = "pt",
encoding = "ISO-8859-1", asciify = TRUE),
trim_ws = TRUE)
setwd("~/GitHub/obs-cigets/analises-ad_hoc/dimensionamento/002 - metodologia de aps")
library(tidyverse)
cadastro_egestorab <- read_delim("cadastro_egestorab.csv",
";", escape_double = FALSE, locale = locale(date_names = "pt",
encoding = "ISO-8859-1", asciify = TRUE),
trim_ws = TRUE) %>% janitor::clean_names()
cadastr_pop_ponderada <- read_delim("cadastr_pop_ponderada.csv",
";", escape_double = FALSE, locale = locale(date_names = "pt",
encoding = "ISO-8859-1", asciify = TRUE),
trim_ws = TRUE) %>% janitor::clean_names()
df <- cadastro_egestorab %>%
left_join(cadastr_pop_ponderada, by = c("cnes", "ine"))
View(df)
setwd("~/GitHub/obs-cigets/analises-ad_hoc/dimensionamento/002 - metodologia de aps")
library(tidyverse)
cadastro_egestorab <- read_delim("cadastro_egestorab.csv",
";", escape_double = FALSE, locale = locale(date_names = "pt",
encoding = "ISO-8859-1", asciify = TRUE),
trim_ws = TRUE) %>% janitor::clean_names() %>%
select(cnes, ine, total_1221)
cadastr_pop_ponderada <- read_delim("cadastr_pop_ponderada.csv",
";", escape_double = FALSE, locale = locale(date_names = "pt",
encoding = "ISO-8859-1", asciify = TRUE),
trim_ws = TRUE) %>% janitor::clean_names()
df <- cadastro_egestorab %>%
left_join(cadastr_pop_ponderada, by = c("cnes", "ine"))
View(df)
df <- cadastro_egestorab %>%
left_join(cadastr_pop_ponderada, by = c("cnes", "ine")) %>%
group_by(ibge, uf, municipio) %>%
summarise(total_pop = sum(total_1221),
total_ponderada = sum(pop_ponderada))
View(df)
df <- cadastro_egestorab %>%
left_join(cadastr_pop_ponderada, by = c("cnes", "ine")) %>%
group_by(ibge, uf, municipio, cnes) %>%
summarise(total_pop = sum(total_1221),
total_ponderada = sum(pop_ponderada))
View(df)
df <- cadastro_egestorab %>%
left_join(cadastr_pop_ponderada, by = c("cnes", "ine")) %>%
group_by(ibge, uf, municipio, cnes, nome_ubs) %>%
summarise(total_pop = sum(total_1221),
total_ponderada = sum(pop_ponderada))
df <- cadastro_egestorab %>%
left_join(cadastr_pop_ponderada, by = c("cnes", "ine")) %>%
group_by(ibge, uf, municipio, cnes, nome_ubs) %>%
summarise(total_pop = sum(total_1221),
total_ponderada = sum(pop_ponderada)) %>%
mutate(prop_vulneravel = total_ponderada/total_pop)
df <- cadastro_egestorab %>%
left_join(cadastr_pop_ponderada, by = c("cnes", "ine")) %>%
group_by(ibge, uf, municipio, cnes, nome_ubs) %>%
summarise(total_pop = sum(total_1221),
total_ponderada = sum(pop_ponderada)) %>%
mutate(prop_vulneravel = total_ponderada/total_pop)
df <- cadastro_egestorab %>%
left_join(cadastr_pop_ponderada, by = c("cnes", "ine")) %>%
group_by(ibge, uf, municipio, cnes, nome_ubs) %>%
summarise(total_pop = sum(total_1221),
total_ponderada = sum(pop_ponderada)) %>%
mutate(prop_vulneravel = total_ponderada/total_pop)
head(df)
df_gyn <- df %>%
filter(ibge == "520870")
head(df_gyn)
df_gyn %>%
ggplot(aes(x = prop_vulneravel)) + geom_histogram()
df_gyn %>%
ggplot(aes(x = prop_vulneravel)) + geom_histogram() + theme_minimal()
?quantile
quantile(df_gyn$prop_vulneravel, probs = c(0.33, 0.66))
q2 <- quantile(df_gyn$prop_vulneravel, probs = c(0.66))
q1 <- quantile(df_gyn$prop_vulneravel, probs = c(0.33))
q2 <- quantile(df_gyn$prop_vulneravel, probs = c(0.66))
q1 <- quantile(df_gyn$prop_vulneravel, probs = c(0.33))
q2 <- quantile(df_gyn$prop_vulneravel, probs = c(0.66))
df_gyn <- df_gyn %>%
mutate(estrato = case_when(prop_vulneravel < q1 ~ "Baixa vulnerabilidade",
prop_vulneravel > q1 & prop_vulneravel < q2 ~ "Média vulnerabilidade",
prop_vulneravel > q2 ~ "Alta vulnerabilidade"))
View(df_gyn)
View(df_gyn)
q1 <- quantile(df_gyn$prop_vulneravel, probs = c(0.33))
q2 <- quantile(df_gyn$prop_vulneravel, probs = c(0.66))
df_gyn <- df_gyn %>%
mutate(estrato = case_when(prop_vulneravel < q1 ~ "Baixa vulnerabilidade",
prop_vulneravel > q1 & prop_vulneravel < q2 ~ "Média vulnerabilidade",
prop_vulneravel > q2 ~ "Alta vulnerabilidade"),
parametros = case_when(estrato == "Baixa vulnerabilidade" ~ 4000,
estrato == "Média vulnerabilidade" ~ 3000,
estrato == "Baixa vulnerabilidade" ~ 2000))
q1 <- quantile(df_gyn$prop_vulneravel, probs = c(0.33))
q2 <- quantile(df_gyn$prop_vulneravel, probs = c(0.66))
df_gyn <- df_gyn %>%
mutate(estrato = case_when(prop_vulneravel < q1 ~ "Baixa vulnerabilidade",
prop_vulneravel > q1 & prop_vulneravel < q2 ~ "Média vulnerabilidade",
prop_vulneravel > q2 ~ "Alta vulnerabilidade"),
parametros = case_when(estrato == "Baixa vulnerabilidade" ~ 3500,
estrato == "Média vulnerabilidade" ~ 3000,
estrato == "Baixa vulnerabilidade" ~ 2000))
View(df_gyn)
q1 <- quantile(df_gyn$prop_vulneravel, probs = c(0.33))
q2 <- quantile(df_gyn$prop_vulneravel, probs = c(0.66))
df_gyn <- df_gyn %>%
mutate(estrato = case_when(prop_vulneravel < q1 ~ "Baixa vulnerabilidade",
prop_vulneravel > q1 & prop_vulneravel < q2 ~ "Média vulnerabilidade",
prop_vulneravel > q2 ~ "Alta vulnerabilidade"),
parametros = case_when(estrato == "Baixa vulnerabilidade" ~ 3500,
estrato == "Média vulnerabilidade" ~ 3000,
estrato == "Alta vulnerabilidade" ~ 2000))
View(df_gyn)
df_gyn <- df_gyn %>%
mutate(total_equipes = total_pop/parametros)
df_gyn <- df_gyn %>%
mutate(total_equipes = total_pop/parametros)
sum(df_gyn$total_equipes)
df_gyn <- df_gyn %>%
mutate(medicos = total_equipes * 1,
enfermeiros = total_equipes * 1,
tecnicos = total_equipes * 2,
acs = total_pop/750)
